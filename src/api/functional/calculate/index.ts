/**
 * @packageDocumentation
 * @module api.functional.calculate
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { WebConnector } from "tgrid";
import type { Driver } from "tgrid";
import type { Format } from "typia/lib/tags/Format";

import type { IAdvancedCalculator } from "../../structures/IAdvancedCalculator";
import type { ICalculator } from "../../structures/ICalculator";
import type { IHeader } from "../../structures/IHeader";
import type { IListener } from "../../structures/IListener";
import type { IMemo } from "../../structures/IMemo";

/**
 * Start simple calculator.
 *
 * Start simple calculator through WebSocket.
 *
 * @controller CalculateController.start
 * @path /calculate/start
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function start(
  connection: IConnection<start.Header>,
  provider: start.Provider,
): Promise<start.Output> {
  const connector: WebConnector<start.Header, start.Provider, start.Listener> =
    new WebConnector(connection.headers ?? ({} as any), provider);
  await connector.connect(
    `${connection.host}/${start.path()}`
      .split("/")
      .filter((str) => !!str)
      .join("/"),
  );
  const driver: Driver<start.Listener> = connector.getDriver();
  return {
    connector,
    driver,
  };
}
export namespace start {
  export type Output = {
    connector: WebConnector<Header, Provider, Listener>;
    driver: Driver<Listener>;
  };
  export type Header = any;
  export type Provider = IListener;
  export type Listener = ICalculator;

  export const path = () => "/calculate/start";
}

/**
 * Start advanced calculator.
 *
 * Start advanced calculator through WebSocket with additional informations.
 *
 * @param id ID to assign
 * @param memo Memo to archive
 *
 * @controller CalculateController.advance
 * @path /calculate/:id/advance
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function advance(
  connection: IConnection<advance.Header>,
  id: string & Format<"uuid">,
  memo: advance.Query,
  provider: advance.Provider,
): Promise<advance.Output> {
  const connector: WebConnector<
    advance.Header,
    advance.Provider,
    advance.Listener
  > = new WebConnector(connection.headers ?? ({} as any), provider);
  await connector.connect(
    `${connection.host}/${advance.path(id, memo)}`
      .split("/")
      .filter((str) => !!str)
      .join("/"),
  );
  const driver: Driver<advance.Listener> = connector.getDriver();
  return {
    connector,
    driver,
  };
}
export namespace advance {
  export type Output = {
    connector: WebConnector<Header, Provider, Listener>;
    driver: Driver<Listener>;
  };
  export type Header = undefined | Partial<IHeader>;
  export type Provider = IListener;
  export type Listener = IAdvancedCalculator;
  export type Query = IMemo;

  export const path = (id: string & Format<"uuid">, memo: advance.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(memo as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = `/calculate/${encodeURIComponent(id ?? "null")}/advance`;
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
}
